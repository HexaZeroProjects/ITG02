import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.fsm.storage.memory import MemoryStorage
import os
import requests
from asgiref.sync import sync_to_async
from aiogram import F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from django.conf import settings

from FlowerDelivery import settings
from core.services_bot import get_admin_orders, get_order_details, get_orders_by_status, get_analyze_products, \
	get_analyze_orders, get_image_url, get_products_by_page, is_user_registered, create_order

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DJANGO_API_URL = os.getenv("DJANGO_API_URL", "http://127.0.0.1:8000")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not TOKEN:
	raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
dp.include_router(router)


@router.message(CommandStart())
async def start(message: Message):
	"""–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
	telegram_id = message.chat.id

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	if not await sync_to_async(is_user_registered)(telegram_id):
		await message.answer("üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º.")
		return  # –ù–µ –¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–ª—å—à–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å

	await message.answer("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ /catalog")


from core.services_bot import get_user_role

@router.message(Command("help"))
async def help_command(message: Message):
	"""–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
	print(f"‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É /help –æ—Ç {message.chat.id}")  # –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å

	telegram_id = message.chat.id
	role = await sync_to_async(get_user_role)(telegram_id)

	print(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–æ–ª—å: {role}")  # –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

	# –†–∞–∑–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
	commands = {
		"admin": (
			"/start - üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
			"/help - ‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
			"/allorders - üìÑüì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤\n"
			"/myorders - üíê –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n"
			"/zakaz - üõí –î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–∫–∞–∑—É —Å ID\n"
			"/statusis - üîç –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º\n"
			"/analiz - üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂\n"
			"/catalog - üè™ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤\n"
			"/Omykot - üê± Omykot\n"
			"/cancel - üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å\n"
		),
		"staff": (
			"/start - üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
			"/help - ‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
			"/myorders - üíê –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n"
			"/allorders - üìÑüì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤\n"
			"/zakaz - üõí –î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–∫–∞–∑—É —Å ID\n"
			"/statusis - üîç –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º\n"
			"/cancel - üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å\n"
		),
		"user": (
			"/start - üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
			"/help - ‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
			"/myorders - üíê –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n"
			"/catalog - üè™ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤\n"
			"/cancel - üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å\n"
		),
		"unknown": "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."
	}

	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
	await message.answer(commands.get(role, "üö´ –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞."))


@router.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
	"""
	–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	"""
	await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	await message.answer("‚úÖ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É.")


from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from core.services_bot import get_user_orders


@router.message(Command("myorders"))
async def my_orders(message: Message):
	"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –∑–∞–∫–∞–∑—ã."""
	telegram_id = message.chat.id

	response = await sync_to_async(get_user_orders)(telegram_id)

	if response["status"] == "success":
		await message.answer(f"üìú *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n\n{response['orders']}", parse_mode="Markdown")
	elif response["status"] == "empty":
		await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
	else:
		await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {response['message']}")


@router.message(Command("catalog"))
async def show_catalog(message: Message):
	"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞."""
	await send_catalog_page(message, 1)


from aiogram.fsm.state import State, StatesGroup


class OrderState(StatesGroup):
	entering_address = State()  # –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞
	entering_phone = State()  # –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
	confirming_order = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ


@router.message(OrderState.entering_address)
async def enter_address(message: Message, state: FSMContext):
	"""–°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É."""
	await state.update_data(address=message.text)
	print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {await state.get_state()}")
	await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
	await state.set_state(OrderState.entering_phone)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É


@router.message(OrderState.entering_phone)
async def enter_phone(message: Message, state: FSMContext):
	"""–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞."""
	print(f"üìå –ü–æ–ª—É—á–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: {message.text}")  # üîπ –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

	phone = message.text.strip()

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
	if not phone.isdigit() or len(phone) < 7:
		await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
		return

	await state.update_data(phone=phone)

	# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
	data = await state.get_data()
	order_text = (
		f"üì¶ –í–∞—à –∑–∞–∫–∞–∑:\n"
		f"üíê –¢–æ–≤–∞—Ä: {data['selected_product']}\n"
		f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
		f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n\n"
		"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ (–¥–∞/–Ω–µ—Ç)."
	)

	await message.answer(order_text)
	await state.set_state(OrderState.confirming_order)  # üîπ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
	print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")  # üîπ –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏


@router.message(OrderState.confirming_order)
async def confirm_order(message: Message, state: FSMContext):
	"""–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ Django."""
	user_input = message.text.lower().strip()

	if user_input == "–¥–∞":
		data = await state.get_data()
		telegram_id = message.chat.id

		# –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –≤ Django
		response = await sync_to_async(create_order)(
			telegram_id=telegram_id,
			address=data['address'],
			product_id=data['selected_product'],
			quantity=data.get("quantity", 1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —à—Ç.
		)

		if response["status"] == "success":
			await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {response['order_id']}")
		else:
			await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {response['message']}")

	else:
		await message.answer("üö´ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")

	await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è


async def send_catalog_page(message: Message, page: int):
	"""–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏."""
	data = await sync_to_async(get_products_by_page)(page)
	products = data["products"]

	if not products:
		await message.answer("üì≠ –í –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
		return

	keyboard = InlineKeyboardBuilder()

	# # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–í—ã–±—Ä–∞—Ç—å"
	# for product in products:
	#     text = f"üíê {product['name']} ‚Äî {product['price']} —Ä—É–±."
	#     await message.answer_photo(
	#         # photo=FSInputFile(product['image'].path) if product.get("image") else None,
	#         photo=FSInputFile(product['image']) if product.get("image") else None,
	#         caption=text
	#     )
	#     keyboard.add(InlineKeyboardButton(text=f"‚úÖ –í—ã–±—Ä–∞—Ç—å {product['name']}", callback_data=f"select_{product['id']}"))
	import os

	# –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–í—ã–±—Ä–∞—Ç—å"
	for product in products:
		text = f"üíê {product['name']} ‚Äî {product['price']} —Ä—É–±."

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
		photo = None
		if product.get("image"):
			image_path = product["image"]
			if os.path.exists(image_path):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
				photo = FSInputFile(image_path)

		if photo:
			await message.answer_photo(photo=photo, caption=text)
		else:
			await message.answer(text)  # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç

		keyboard.add(InlineKeyboardButton(text=f"‚úÖ –í—ã–±—Ä–∞—Ç—å {product['name']}", callback_data=f"select_{product['id']}"))

	# –ö–Ω–æ–ø–∫–∏ –ª–∏—Å—Ç–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
	pagination_buttons = []
	if data["current_page"] > 1:
		pagination_buttons.append(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"))
	if data["current_page"] < data["total_pages"]:
		pagination_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°", callback_data=f"page_{page + 1}"))

	if pagination_buttons:
		keyboard.row(*pagination_buttons)

	await message.answer("üìñ –õ–∏—Å—Ç–∞–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥:", reply_markup=keyboard.as_markup())


@router.callback_query(lambda c: c.data.startswith("page_"))
async def paginate_catalog(callback: CallbackQuery):
	"""–õ–∏—Å—Ç–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞."""
	page = int(callback.data.split("_")[1])
	await send_catalog_page(callback.message, page)
	await callback.answer()


@router.callback_query(lambda c: c.data.startswith("select_"))
async def select_product(callback: CallbackQuery, state: FSMContext):
	"""–§–∏–∫—Å–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞."""
	product_id = int(callback.data.split("_")[1])
	await state.update_data(selected_product=product_id)

	await callback.message.answer(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
	await state.set_state(OrderState.entering_address)
	await callback.answer()


@router.message(Command("Omykot"))
async def omykot_command(message: Message):
	print(f"‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É /Omykot –æ—Ç {message.chat.id}")  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
	if message.text.startswith("/Omykot"):
		await message.answer("–ü—Ä–∏–≤–µ—Ç, –í–ª–∞–¥–µ–ª–µ—Ü –ú–∞–≥–∞–∑–∏–Ω–∞!")


@router.message(Command("allorders"))
async def all_orders_command(message: Message):
	print(f"‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É /allorders –æ—Ç {message.chat.id}")  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
	try:
		# –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –ø–æ–º–æ—â—å—é `get_admin_orders()`
		response = await sync_to_async(get_admin_orders)()

		if response["status"] != "success":
			await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")
			return

		orders = response["orders"]
		if not orders:
			await message.answer("üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
			return

		# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
		orders_dir = "media/orders"
		os.makedirs(orders_dir, exist_ok=True)

		# –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
		current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
		file_name = f"Orders_{current_time}.txt"
		file_path = os.path.join(orders_dir, file_name)

		# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ —Ñ–∞–π–ª
		with open(file_path, "w", encoding="utf-8") as file:
			file.write(f"–§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {current_time}\n\n")
			for order in orders:
				file.write(
					f"ID: {order['id']}\n"
					f"–î–∞—Ç–∞: {order['created_at']}\n"
					f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order['delivery_address']}\n"
					f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
					f"–¢–æ–≤–∞—Ä—ã: {', '.join(order['items']) if order['items'] else '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤'}\n\n"
				)

		# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
		document = FSInputFile(file_path)

		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		await message.answer_document(document, caption="üìÑ –í–æ—Ç –≤–∞—à —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –∑–∞–∫–∞–∑–∞–º–∏.")
	except Exception as e:
		await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ID –∑–∞–∫–∞–∑–∞
class ZakazStates(StatesGroup):
	waiting_for_order_id = State()


@router.message(Command("zakaz"))
async def zakaz_start_command(message: Message, state: FSMContext):
	print(f"‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É /zakaz –æ—Ç {message.chat.id}")  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
	await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
	await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞:")
	await state.set_state(ZakazStates.waiting_for_order_id)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –∑–∞–∫–∞–∑–∞
@router.message(ZakazStates.waiting_for_order_id)
async def process_order_id(message: Message, state: FSMContext):
	try:
		# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
		order_id = int(message.text.strip())
	except ValueError:
		await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∑–∞–∫–∞–∑–∞.")
		return

	# –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
	response = await sync_to_async(get_order_details)(order_id)

	if response["status"] != "success":
		await message.answer(response["message"])
	else:
		order = response["order"]
		await message.answer(
			f"üìÑ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n"
			f"ID: {order['id']}\n"
			f"–î–∞—Ç–∞: {order['created_at']}\n"
			f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order['delivery_address']}\n"
			f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
			f"–¢–æ–≤–∞—Ä—ã: {', '.join(order['items']) if order['items'] else '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤'}"
		)

	# –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	await state.clear()


# –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
class StatusFilterStates(StatesGroup):
	awaiting_status = State()


# –ü–µ—Ä–≤—ã–π —à–∞–≥: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("statusis"))
async def statusis_step_one(message: Message, state: FSMContext):
	print(f"‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É /statusis –æ—Ç {message.chat.id}")  # –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
	await message.answer(
		"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:\n"
		"1. pending - –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
		"2. processed - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è\n"
		"3. delivered - –î–æ—Å—Ç–∞–≤–ª–µ–Ω\n"
		"4. canceled - –û—Ç–º–µ–Ω–µ–Ω\n"
		"\n/cancel ‚Äì –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å."
	)
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	await state.set_state(StatusFilterStates.awaiting_status)


# –í—Ç–æ—Ä–æ–π —à–∞–≥: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –≤—ã–≤–æ–¥ –∑–∞–∫–∞–∑–æ–≤
@router.message(F.text, StatusFilterStates.awaiting_status)
async def statusis_step_two(message: Message, state: FSMContext):
	try:
		# –ö–∞—Ä—Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
		status_map = {
			"1": "pending",
			"2": "processed",
			"3": "delivered",
			"4": "canceled",
			"pending": "pending",
			"processed": "processed",
			"delivered": "delivered",
			"canceled": "canceled",
		}

		# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
		status_name = status_map.get(message.text.strip().lower())
		if not status_name:
			await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 4 –∏–ª–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤.")
			return

		# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
		response = await sync_to_async(get_orders_by_status)(status_name)

		if response["status"] != "success":
			await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {response.get('message', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã.')}")
			return

		order_ids = response["order_ids"]
		if not order_ids:
			await message.answer("üì≠ –ó–∞–∫–∞–∑—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
		else:
			orders_text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º:\n" + ", ".join(map(str, order_ids))
			await message.answer(orders_text)

		# –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		await state.clear()

	except Exception as e:
		await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
		await state.clear()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
class AnalyzeState(StatesGroup):
	awaiting_choice = State()
	awaiting_data = State()
	awaiting_status = State()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /analiz
@router.message(Command("analiz"))
async def analiz_command(message: Message, state: FSMContext):
	"""
	–ù–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥ –∞–Ω–∞–ª–∏–∑–∞.
	"""
	await message.answer(
		"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å:\n"
		"1Ô∏è‚É£ - üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º\n"
		"2Ô∏è‚É£ - üì¶ –û—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º\n"
		"\n/cancel ‚Äì –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å."
	)

	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	await state.set_state(AnalyzeState.awaiting_choice)


@router.message(AnalyzeState.awaiting_choice)
async def analiz_step_one(message: Message, state: FSMContext):
	"""
	–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	"""
	analiz_type = message.text.strip()

	if analiz_type == "1":
		await message.answer("üìä –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤...")
		await analyze_orders(message, state)  # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤
	elif analiz_type == "2":
		await message.answer("üì¶ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤...")
		await analyze_products(message, state)  # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
	else:
		await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1 –∏–ª–∏ 2.")  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
		return  # ‚¨Ö –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞

	await state.clear()  # ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞


async def analyze_orders(message: Message, state: FSMContext):
	"""–ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤."""
	orders_data = await sync_to_async(get_analyze_orders)()

	if not orders_data:
		await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫–∞–∑–æ–≤.")
	else:
		report = (
			f"üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º:\n"
			f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {orders_data['total_orders']} –Ω–∞ —Å—É–º–º—É {orders_data['total_amount']} —Ä—É–±.\n"
			f"–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {orders_data['pending_count']} ({orders_data['pending_amount']} —Ä—É–±.)\n"
			f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {orders_data['processed_count']} ({orders_data['processed_amount']} —Ä—É–±.)\n"
			f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω: {orders_data['delivered_count']} ({orders_data['delivered_amount']} —Ä—É–±.)\n"
			f"–û—Ç–º–µ–Ω–µ–Ω: {orders_data['canceled_count']} ({orders_data['canceled_amount']} —Ä—É–±.)"
		)
		await message.answer(report)

	await state.clear()  # ‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω ‚Äì —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º


async def analyze_products(message: Message, state: FSMContext):
	"""–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤."""
	products_data = await sync_to_async(get_analyze_products)()

	if not products_data:
		await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤.")
	else:
		await message.answer("üì¶ –¢–æ–ø-3 –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:")
		for product in products_data["top_products"]:
			if product.get("image"):
				image_path = product["image"].path  # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
				if os.path.exists(image_path):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
					try:
						# –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ñ–∞–π–ª–∞
						await message.answer_photo(
							photo=FSInputFile(image_path),  # –ó–∞–º–µ–Ω—è–µ–º InputFile –Ω–∞ FSInputFile
							caption=f"{product['name']} ‚Äî {product['sales']} –ø—Ä–æ–¥–∞–∂"
						)
					except Exception as e:
						await message.answer(
							f"{product['name']} ‚Äî {product['sales']} –ø—Ä–æ–¥–∞–∂\n(–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e})"
						)
			await message.answer(f"{product['name']} ‚Äî {product['sales']} –ø—Ä–æ–¥–∞–∂")

		await message.answer("üì¶ –ê–Ω—Ç–∏—Ç–æ–ø-3 –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:")
		for product in products_data["worst_products"]:
			if product.get("image"):
				image_path = product["image"].path  # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
				if os.path.exists(image_path):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
					try:
						# –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ñ–∞–π–ª–∞
						await message.answer_photo(
							photo=FSInputFile(image_path),  # –ó–∞–º–µ–Ω—è–µ–º InputFile –Ω–∞ FSInputFile
							caption=f"{product['name']} ‚Äî {product['sales']} –ø—Ä–æ–¥–∞–∂"
						)
					except Exception as e:
						await message.answer(
							f"{product['name']} ‚Äî {product['sales']} –ø—Ä–æ–¥–∞–∂\n(–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e})"
						)
			await message.answer(f"{product['name']} ‚Äî {product['sales']} –ø—Ä–æ–¥–∞–∂")

	await state.clear()  # ‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω ‚Äì —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
@router.message(Command("cancel"), StatusFilterStates.awaiting_status)
async def cancel_command(message: Message, state: FSMContext):
	await state.clear()
	await message.answer("‚úÖ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def fallback_handler(message: Message, state: FSMContext):
	current_state = await state.get_state()
	if current_state in [OrderState.entering_address, OrderState.entering_phone, OrderState.confirming_order]:
		return
	if current_state:
		# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–æ –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
		await message.answer(
			"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å –ø–æ–º–æ—â—å—é /cancel.")
	else:
		# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –Ω–µ –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É
		await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")


@router.message()
async def handle_message(message: Message):
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å
	if message.text.startswith("/"):
		return  # –î–∞–µ–º –∫–æ–º–∞–Ω–¥–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ

	email = message.text
	telegram_id = message.chat.id

	# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Django
	response = requests.post(
		f"{DJANGO_API_URL}/users/bind-telegram/",
		json={"email": email, "telegram_id": telegram_id}
	)

	if response.status_code == 200:
		data = response.json()
		await message.answer(data.get("message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"))
	else:
		await message.answer("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def other_messages(message: Message):
	await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å @) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /help")


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
async def notify_new_order(order):
	"""
	–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ.
	"""
	admin_chat_id = settings.ADMIN_CHAT_ID

	# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
	formatted_date = order.created_at.strftime("%d.%m.%Y %H:%M")

	# –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫–∞–∑
	order_url = f"http://localhost:8000/manage-orders/{order.id}/update/"

	# –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	message = (
		f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
		f"ID: {order.id}\n"
		f"–î–∞—Ç–∞: {formatted_date}\n"
		f"–°—Ç–∞—Ç—É—Å: {order.get_status_display()}\n"
		f'–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑: {order_url}'
	)

	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	await bot.send_message(chat_id=admin_chat_id, text=message)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
	print("Bot is running")
	await dp.start_polling(bot)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
	asyncio.run(main())
