import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, InputFile, FSInputFile
from aiogram.fsm.storage.memory import MemoryStorage
import os
import requests
from asgiref.sync import sync_to_async


from FlowerDelivery import settings
from core.services_bot import get_admin_orders, get_order_details, get_orders_by_status, get_analyze_products, \
    get_analyze_orders, get_image_url

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DJANGO_API_URL = os.getenv("DJANGO_API_URL", "http://127.0.0.1:8000")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
dp.include_router(router)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def help_command(message: Message):
    print(f"‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É /help –æ—Ç {message.chat.id}")  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å

    help_text = (
        "/start - üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        " /help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
         " /allorders - üìÑüì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ \n"
        " /zakaz -  üõí –î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–∫–∞–∑—É —Å ID \n"
        " /statusis - üîç –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—Å—É—Å–∞–º\n"
        " /analiz - üìä –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—Å—É—Å–∞–º\n"
        " /Omykot - üê± Omykot\n"
       " /cancel ‚Äì üö´ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å.\n"
    )
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
    if not isinstance(help_text, str):
        help_text = str(help_text)

    await message.answer(help_text)

@router.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("‚úÖ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É.")


# @router.message(Command("allorders"))
# async def all_orders_command(message: Message):
#     await message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã.")


# import os
# from datetime import datetime
# from aiogram.types import FSInputFile

# @router.message(Command("allorders"))
# async def all_orders_command(message: Message):
#     # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
#     orders_dir = "media/orders"
#     os.makedirs(orders_dir, exist_ok=True)
#
#     # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
#     current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
#     file_name = f"Orders_{current_time}.txt"
#     file_path = os.path.join(orders_dir, file_name)
#
#     # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–∞–π–ª
#     with open(file_path, "w", encoding="utf-8") as file:
#         file.write(f"–§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {current_time}\n")
#
#     # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
#     document = FSInputFile(file_path)
#
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     await message.answer_document(document, caption="üìÑ –í–æ—Ç –≤–∞—à —Ñ–∞–π–ª —Å –∑–∞–∫–∞–∑–∞–º–∏.")

@router.message(Command("Omykot"))
async def omykot_command(message: Message):
    print(f"‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É /Omykot –æ—Ç {message.chat.id}")  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    if message.text.startswith("/Omykot"):
        await message.answer("–ü—Ä–∏–≤–µ—Ç")



@router.message(Command("allorders"))
async def all_orders_command(message: Message):
    print(f"‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É /allorders –æ—Ç {message.chat.id}")  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –ø–æ–º–æ—â—å—é `get_admin_orders()`
        response = await sync_to_async(get_admin_orders)()


        if response["status"] != "success":
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")
            return

        orders = response["orders"]
        if not orders:
            await message.answer("üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        orders_dir = "media/orders"
        os.makedirs(orders_dir, exist_ok=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        file_name = f"Orders_{current_time}.txt"
        file_path = os.path.join(orders_dir, file_name)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ —Ñ–∞–π–ª
        with open(file_path, "w", encoding="utf-8") as file:
            file.write(f"–§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {current_time}\n\n")
            for order in orders:
                file.write(
                    f"ID: {order['id']}\n"
                    f"–î–∞—Ç–∞: {order['created_at']}\n"
                    f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order['delivery_address']}\n"
                    f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
                    f"–¢–æ–≤–∞—Ä—ã: {', '.join(order['items']) if order['items'] else '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤'}\n\n"
                )

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        document = FSInputFile(file_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_document(document, caption="üìÑ –í–æ—Ç –≤–∞—à —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –∑–∞–∫–∞–∑–∞–º–∏.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# @router.message()
# async def zakaz_details_command(message: Message):
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "Zakaz" –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ ID
#     if message.text.startswith("Zakaz") and message.text[5:].isdigit():
#         order_id = int(message.text[5:])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞
#         try:
#             # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
#             response = await sync_to_async(get_order_details)(order_id)
#
#             if response["status"] != "success":
#                 await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {response.get('message', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ.')}")
#                 return
#
#             order = response["order"]
#
#             # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
#             order_text = (
#                 f"üì¶ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ**:\n"
#                 f"ID: {order['id']}\n"
#                 f"–î–∞—Ç–∞: {order['created_at']}\n"
#                 f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order['delivery_address']}\n"
#                 f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
#                 f"–¢–æ–≤–∞—Ä—ã: {', '.join(order['items']) if order['items'] else '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤'}"
#             )
#
#             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
#             await message.answer(order_text)
#
#         except Exception as e:
#             await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# @router.message()
# async def zakaz_details_command(message: Message):
#     print(f"‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É /ZakazID –æ—Ç {message.chat.id}")  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "Zakaz"
#     if not message.text.startswith("Zakaz"):
#         return  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "Zakaz", –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º
#
#     # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –∑–∞–∫–∞–∑–∞
#     try:
#         order_id = int(message.text.replace("Zakaz", "").strip())
#     except ValueError:
#         await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: Zakaz<ID –∑–∞–∫–∞–∑–∞>.")
#         return
#
#     # –í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
#     response = await sync_to_async(get_order_details)(order_id)
#
#     if response["status"] != "success":
#         await message.answer(response["message"])
#     else:
#         order = response["order"]
#         await message.answer(
#             f"üìÑ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n"
#             f"ID: {order['id']}\n"
#             f"–î–∞—Ç–∞: {order['created_at']}\n"
#             f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order['delivery_address']}\n"
#             f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
#             f"–¢–æ–≤–∞—Ä—ã: {', '.join(order['items']) if order['items'] else '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤'}"
#         )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è email (—Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ @)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ID –∑–∞–∫–∞–∑–∞
class ZakazStates(StatesGroup):
    waiting_for_order_id = State()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /zakaz
# @router.message(Command("zakaz"))
# async def zakaz_start_command(message: Message, state: FSMContext):
#     print(f"‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É /zakaz –æ—Ç {message.chat.id}")  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞:")
#     await state.set_state(ZakazStates.waiting_for_order_id)

@router.message(Command("zakaz"))
async def zakaz_start_command(message: Message, state: FSMContext):
    print(f"‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É /zakaz –æ—Ç {message.chat.id}")  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞:")
    await state.set_state(ZakazStates.waiting_for_order_id)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –∑–∞–∫–∞–∑–∞
@router.message(ZakazStates.waiting_for_order_id)
async def process_order_id(message: Message, state: FSMContext):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
        order_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∑–∞–∫–∞–∑–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    response = await sync_to_async(get_order_details)(order_id)

    if response["status"] != "success":
        await message.answer(response["message"])
    else:
        order = response["order"]
        await message.answer(
            f"üìÑ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n"
            f"ID: {order['id']}\n"
            f"–î–∞—Ç–∞: {order['created_at']}\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order['delivery_address']}\n"
            f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
            f"–¢–æ–≤–∞—Ä—ã: {', '.join(order['items']) if order['items'] else '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤'}"
        )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

from aiogram import F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
class StatusFilterStates(StatesGroup):
    awaiting_status = State()

# –ü–µ—Ä–≤—ã–π —à–∞–≥: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("statusis"))
async def statusis_step_one(message: Message, state: FSMContext):
    print(f"‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É /statusis –æ—Ç {message.chat.id}")  # –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:\n"
        "1. pending - –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        "2. processed - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è\n"
        "3. delivered - –î–æ—Å—Ç–∞–≤–ª–µ–Ω\n"
        "4. canceled - –û—Ç–º–µ–Ω–µ–Ω\n"
        "\n/cancel ‚Äì –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å."
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(StatusFilterStates.awaiting_status)

# –í—Ç–æ—Ä–æ–π —à–∞–≥: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –≤—ã–≤–æ–¥ –∑–∞–∫–∞–∑–æ–≤
@router.message(F.text, StatusFilterStates.awaiting_status)
async def statusis_step_two(message: Message, state: FSMContext):
    try:
        # –ö–∞—Ä—Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
        status_map = {
            "1": "pending",
            "2": "processed",
            "3": "delivered",
            "4": "canceled",
            "pending": "pending",
            "processed": "processed",
            "delivered": "delivered",
            "canceled": "canceled",
        }

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        status_name = status_map.get(message.text.strip().lower())
        if not status_name:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 4 –∏–ª–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤.")
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        response = await sync_to_async(get_orders_by_status)(status_name)

        if response["status"] != "success":
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {response.get('message', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã.')}")
            return

        order_ids = response["order_ids"]
        if not order_ids:
            await message.answer("üì≠ –ó–∞–∫–∞–∑—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        else:
            orders_text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º:\n" + ", ".join(map(str, order_ids))
            await message.answer(orders_text)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await state.clear()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
class AnalyzeState(StatesGroup):
    awaiting_choice = State()
    awaiting_data = State()
    awaiting_status = State()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /analiz
@router.message(Command("analiz"))
async def analiz_command(message: Message, state: FSMContext):
    """
    –ù–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥ –∞–Ω–∞–ª–∏–∑–∞.
    """
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å:\n"
        "1Ô∏è‚É£ - üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º\n"
        "2Ô∏è‚É£ - üì¶ –û—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º\n"
        "\n/cancel ‚Äì –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å."
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(AnalyzeState.awaiting_choice)

@router.message()
async def analiz_step_one(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    analiz_type = message.text.strip()
    if analiz_type not in ["1", "2"]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1 –∏–ª–∏ 2.")
        return

    if analiz_type == "1":
        # –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ç—á–µ—Ç—É –ø–æ –∑–∞–∫–∞–∑–∞–º
        await state.set_state("analyzing_orders")
        await message.answer("üìä –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤...")
        await analyze_orders(message, state)
    elif analiz_type == "2":
        # –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ç—á–µ—Ç—É –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        await state.set_state("analyzing_products")
        await message.answer("üì¶ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤...")
        await analyze_products(message, state)


async def analyze_orders(message: Message, state: FSMContext):
    """
    –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤.
    """
    # –ó–¥–µ—Å—å –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    orders_data = await sync_to_async(get_analyze_orders)()

    if not orders_data:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫–∞–∑–æ–≤.")
        await state.clear()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = (
        f"üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º:\n"
        f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {orders_data['total_orders']} –Ω–∞ —Å—É–º–º—É {orders_data['total_amount']} —Ä—É–±.\n"
        f"–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {orders_data['pending_count']} ({orders_data['pending_amount']} —Ä—É–±.)\n"
        f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {orders_data['processed_count']} ({orders_data['processed_amount']} —Ä—É–±.)\n"
        f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω: {orders_data['delivered_count']} ({orders_data['delivered_amount']} —Ä—É–±.)\n"
        f"–û—Ç–º–µ–Ω–µ–Ω: {orders_data['canceled_count']} ({orders_data['canceled_amount']} —Ä—É–±.)"
    )
    await message.answer(report)
    await state.clear()

from django.conf import settings



# async def analyze_products(message: Message, state: FSMContext):
#     """
#     –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤.
#     """
#     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö
#     products_data = await sync_to_async(get_analyze_products)()
#
#     if not products_data:
#         await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤.")
#         await state.clear()
#         return
#
#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ø-3 –∏ –∞–Ω—Ç–∏—Ç–æ–ø-3
#     await message.answer("üì¶ –¢–æ–ø-3 –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:")
#     for product in products_data["top_products"]:
#         image_url = product["image"] if product["image"] else None
#         if image_url:
#             await message.answer_photo(
#                 photo=product["image"],
#                 caption=f"{product['name']} ‚Äî {product['sales']} –ø—Ä–æ–¥–∞–∂"
#             )
#         else:
#             await message.answer(
#                 f"{product['name']} ‚Äî {product['sales']} –ø—Ä–æ–¥–∞–∂\n(–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
#             )
#
#     await message.answer("üì¶ –ê–Ω—Ç–∏—Ç–æ–ø-3 –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:")
#     for product in products_data["worst_products"]:
#         image_url = product["image"] if product["image"] else None
#         if image_url:
#             await message.answer_photo(
#                 photo=product["image"],
#                 caption=f"{product['name']} ‚Äî {product['sales']} –ø—Ä–æ–¥–∞–∂"
#             )
#         else:
#             await message.answer(
#                 f"{product['name']} ‚Äî {product['sales']} –ø—Ä–æ–¥–∞–∂\n(–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
#             )
#
#     await state.clear()

from aiogram.types import InputFile
import os

from aiogram.types import InputFile
import os

import os
from aiogram.types import InputFile

import os
from aiogram.types import InputFile


import os
from aiogram.types import InputFile

async def analyze_products(message: Message, state: FSMContext):
    """
    –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö
    products_data = await sync_to_async(get_analyze_products)()

    if not products_data:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤.")
        await state.clear()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ø-3 –∏ –∞–Ω—Ç–∏—Ç–æ–ø-3
    await message.answer("üì¶ –¢–æ–ø-3 –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:")
    for product in products_data["top_products"]:
        if product.get("image"):
            image_path = product["image"].path  # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            if os.path.exists(image_path):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ñ–∞–π–ª–∞
                    await message.answer_photo(
                        photo=FSInputFile(image_path),  # –ó–∞–º–µ–Ω—è–µ–º InputFile –Ω–∞ FSInputFile
                        caption=f"{product['name']} ‚Äî {product['sales']} –ø—Ä–æ–¥–∞–∂"
                    )
                except Exception as e:
                    await message.answer(
                        f"{product['name']} ‚Äî {product['sales']} –ø—Ä–æ–¥–∞–∂\n(–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e})"
                    )
            else:
                await message.answer(
                    f"{product['name']} ‚Äî {product['sales']} –ø—Ä–æ–¥–∞–∂\n(–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω)"
                )
        else:
            await message.answer(
                f"{product['name']} ‚Äî {product['sales']} –ø—Ä–æ–¥–∞–∂\n(–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
            )

    await message.answer("üì¶ –ê–Ω—Ç–∏—Ç–æ–ø-3 –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:")
    for product in products_data["worst_products"]:
        if product.get("image"):
            image_path = product["image"].path  # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            if os.path.exists(image_path):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ñ–∞–π–ª–∞
                    await message.answer_photo(
                        photo=FSInputFile(image_path),  # –ó–∞–º–µ–Ω—è–µ–º InputFile –Ω–∞ FSInputFile
                        caption=f"{product['name']} ‚Äî {product['sales']} –ø—Ä–æ–¥–∞–∂"
                    )
                except Exception as e:
                    await message.answer(
                        f"{product['name']} ‚Äî {product['sales']} –ø—Ä–æ–¥–∞–∂\n(–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e})"
                    )
            else:
                await message.answer(
                    f"{product['name']} ‚Äî {product['sales']} –ø—Ä–æ–¥–∞–∂\n(–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω)"
                )
        else:
            await message.answer(
                f"{product['name']} ‚Äî {product['sales']} –ø—Ä–æ–¥–∞–∂\n(–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
            )

    await state.clear()

# def get_orders_analysis():
#     """
#     –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫–∞–∑–æ–≤.
#     """
#     # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
#     return {
#         "total_orders": 23,
#         "total_amount": 100000,
#         "pending_count": 1,
#         "pending_amount": 100,
#         "processed_count": 15,
#         "processed_amount": 23223,
#         "delivered_count": 10,
#         "delivered_amount": 34343,
#         "canceled_count": 2,
#         "canceled_amount": 34343,
#     }


# def get_products_analysis():
#     """
#     –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤.
#     """
#     # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
#     return {
#         "top_products": [
#             {"name": "–¢–æ–≤–∞—Ä 1", "sales": 100, "image": "https://example.com/image1.jpg"},
#             {"name": "–¢–æ–≤–∞—Ä 2", "sales": 80, "image": "https://example.com/image2.jpg"},
#             {"name": "–¢–æ–≤–∞—Ä 3", "sales": 60, "image": "https://example.com/image3.jpg"},
#         ],
#         "worst_products": [
#             {"name": "–¢–æ–≤–∞—Ä 4", "sales": 1, "image": "https://example.com/image4.jpg"},
#             {"name": "–¢–æ–≤–∞—Ä 5", "sales": 2, "image": "https://example.com/image5.jpg"},
#             {"name": "–¢–æ–≤–∞—Ä 6", "sales": 3, "image": "https://example.com/image6.jpg"},
#         ],
#     }
#




# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
@router.message(Command("cancel"), StatusFilterStates.awaiting_status)
async def cancel_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚úÖ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def fallback_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–æ –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å –ø–æ–º–æ—â—å—é /cancel.")
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –Ω–µ –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")


@router.message()
async def handle_message(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å
    if message.text.startswith("/"):
        return  # –î–∞–µ–º –∫–æ–º–∞–Ω–¥–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ

    email = message.text
    telegram_id = message.chat.id

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Django
    response = requests.post(
        f"{DJANGO_API_URL}/users/bind-telegram/",
        json={"email": email, "telegram_id": telegram_id}
    )

    if response.status_code == 200:
        data = response.json()
        await message.answer(data.get("message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"))
    else:
        await message.answer("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def other_messages(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å @) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /help")

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
async def notify_new_order(order):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ.
    """
    admin_chat_id = settings.ADMIN_CHAT_ID

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    formatted_date = order.created_at.strftime("%d.%m.%Y %H:%M")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫–∞–∑
    order_url = f"http://localhost:8000/manage-orders/{order.id}/update/"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"ID: {order.id}\n"
        f"–î–∞—Ç–∞: {formatted_date}\n"
        f"–°—Ç–∞—Ç—É—Å: {order.get_status_display()}\n"
        f'–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑: {order_url}'
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(chat_id=admin_chat_id, text=message)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    print("Bot is running")
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())