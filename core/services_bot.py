from django.contrib.auth import get_user_model

from FlowerDelivery import settings

User = get_user_model()

def bind_telegram_service(email, telegram_id):
    """
    –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç Telegram ID –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user = User.objects.filter(email=email).first()
    if user and hasattr(user, 'profile'):
        user.profile.telegram_id = telegram_id
        user.profile.save()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ ID –∑–∞–ø–∏—Å–∞–ª—Å—è
        saved_user = User.objects.filter(profile__telegram_id=telegram_id).exists()
        if saved_user:
            return {"status": "success", "message": "Telegram ID –ø—Ä–∏–≤—è–∑–∞–Ω"}
        else:
            return {"status": "error", "message": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Telegram ID"}

    return {"status": "error", "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}


from users.models import UserProfile  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


def get_user_role(telegram_id):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (admin, staff, user)."""
    profile = UserProfile.objects.filter(telegram_id=telegram_id).select_related("user").first()

    if not profile:
        print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")  # –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
        return "unknown"

    if profile.user.is_superuser:
        print(f"üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} - –°—É–ø–µ—Ä–∞–¥–º–∏–Ω!")
        return "admin"
    elif profile.user.is_staff:
        print(f"üë®‚Äçüíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} - –ü–µ—Ä—Å–æ–Ω–∞–ª!")
        return "staff"
    else:
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} - –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!")
        return "user"

from django.db import transaction

from orders.models import Order, OrderItem

def get_user_orders(telegram_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID."""
    try:
        profile = UserProfile.objects.filter(telegram_id=telegram_id).first()
        if not profile:
            return {"status": "error", "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        orders = Order.objects.filter(user=profile.user).order_by("-created_at")
        if not orders.exists():
            return {"status": "empty", "message": "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤"}

        order_list = []
        for order in orders:
            items = OrderItem.objects.filter(order=order)
            items_text = "\n".join([f"{item.product.name} - {item.quantity} —à—Ç." for item in items])

            order_list.append(
                f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order.id} –æ—Ç {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìç –ê–¥—Ä–µ—Å: {order.delivery_address}\n"
                f"üîπ –°—Ç–∞—Ç—É—Å: {order.get_status_display()}\n"
                f"üõí –°–æ—Å—Ç–∞–≤:\n{items_text}\n"
                f"--------------------------"
            )

        return {"status": "success", "orders": "\n".join(order_list)}

    except Exception as e:
        return {"status": "error", "message": str(e)}




def create_order(telegram_id, address, product_id, quantity=1):
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ Django, —É—á–∏—Ç—ã–≤–∞—è –º–æ–¥–µ–ª—å Order –∏ OrderItem."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        profile = UserProfile.objects.filter(telegram_id=telegram_id).first()
        if not profile:
            return {"status": "error", "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä
        product = Product.objects.filter(id=product_id).first()
        if not product:
            return {"status": "error", "message": "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —á—Ç–æ–±—ã –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        with transaction.atomic():
            # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
            order = Order.objects.create(
                user=profile.user,
                delivery_address=address,
                status="pending"
            )
            order.save()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑

            # –°–æ–∑–¥–∞—ë–º —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ
            order_item = OrderItem.objects.create(
                order=order,
                product=product,
                quantity=quantity
            )
            order_item.save()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä

        return {"status": "success", "order_id": order.id}

    except Exception as e:
        return {"status": "error", "message": str(e)}



from datetime import datetime

def format_date(date_value):
    try:
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º datetime
        if isinstance(date_value, datetime):
            return date_value.strftime('%d.%m.%Y %H:%M')
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime
        elif isinstance(date_value, str):
            parsed_date = datetime.fromisoformat(date_value)
            return parsed_date.strftime('%d.%m.%Y %H:%M')
    except Exception:
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"


def get_admin_orders():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤–∫–ª—é—á–∞—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤.
    """
    from orders.models import Order, OrderItem
    from catalog.models import Product

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    orders = Order.objects.all()
    grouped_orders = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É
    for order in orders:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ OrderItem, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º –∑–∞–∫–∞–∑–æ–º
        order_items = OrderItem.objects.filter(order=order)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        products = []
        for item in order_items:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–¥—É–∫—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å OrderItem
            product = Product.objects.filter(id=item.product_id).first()
            if product:
                products.append(f"{product.name} (–∏–¥{product.id}) ‚Äî {item.quantity} —à—Ç.")
            else:
                products.append("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
        grouped_orders.append({
            "id": order.id,
            # "created_at": order.created_at,
            "created_at": order.created_at.strftime("%d.%m.%Y %H:%M"),
            "delivery_address": order.delivery_address,
            "status": order.status,
            "items": products if products else ["–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤"],
        })

    return {"status": "success", "orders": grouped_orders}

def get_order_details(order_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, –≤–∫–ª—é—á–∞—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤.
    """
    from orders.models import Order, OrderItem
    from catalog.models import Product

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –ø–æ ID
    order = Order.objects.filter(id=order_id).first()

    if not order:
        return {"status": "error", "message": "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"}

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ OrderItem, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º –∑–∞–∫–∞–∑–æ–º
    order_items = OrderItem.objects.filter(order=order)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    products = []
    for item in order_items:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–¥—É–∫—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å OrderItem
        product = Product.objects.filter(id=item.product_id).first()
        if product:
            products.append(f"{product.name} (–∏–¥{product.id}) ‚Äî {item.quantity} —à—Ç.")
        else:
            products.append("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
    order_details = {
        "id": order.id,
        "created_at": order.created_at.strftime("%d.%m.%Y %H:%M"),
        "delivery_address": order.delivery_address,
        "status": order.status,
        "items": products if products else ["–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤"],
    }

    return {"status": "success", "order": order_details}


def get_orders_by_status(status_name):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É.
    """
    from orders.models import Order

    # –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    valid_statuses = ["pending", "processed", "delivered", "canceled"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º
    if status_name not in valid_statuses:
        return {"status": "error", "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å."}

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    orders = Order.objects.filter(status=status_name).values("id")
    order_ids = [order["id"] for order in orders]

    return {"status": "success", "order_ids": order_ids}


from orders.models import Order, OrderItem
from catalog.models import Product
from django.db.models import Sum, Count

from django.db.models import Sum, F

from django.db.models import Sum, F

def get_analyze_orders():
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑—ã, –≤–æ–∑–≤—Ä–∞—â–∞—è –æ–±—â—É—é —Å—É–º–º—É –∏ –¥–µ—Ç–∞–ª–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º.
    """
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    total_orders = Order.objects.count()
    total_amount = (
        Order.objects.annotate(
            order_total=Sum(F("items__quantity") * F("items__product__price"))
        )
        .aggregate(total_sum=Sum("order_total"))["total_sum"] or 0
    )

    # –î–µ—Ç–∞–ª–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    statuses = ["pending", "processed", "delivered", "canceled"]
    status_details = {
        "pending_count": 0,
        "pending_amount": 0,
        "processed_count": 0,
        "processed_amount": 0,
        "delivered_count": 0,
        "delivered_amount": 0,
        "canceled_count": 0,
        "canceled_amount": 0,
    }

    for status in statuses:
        status_orders = Order.objects.filter(status=status).annotate(
            order_total=Sum(F("items__quantity") * F("items__product__price"))
        )
        count = status_orders.count()
        amount = status_orders.aggregate(total_sum=Sum("order_total"))["total_sum"] or 0
        status_details[f"{status}_count"] = count
        status_details[f"{status}_amount"] = amount

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = {
        "total_orders": total_orders,
        "total_amount": total_amount,
        **status_details,
    }
    return result

def get_image_url(image_path):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """

    base_url = getattr(settings, "DJANGO_API_URL", "http://127.0.0.1:8000")
    print(f"{base_url}/media/{image_path}")
    return f"{base_url}/media/{image_path}"




def get_analyze_products():
    """
    –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–æ–ø-3 –∏ –∞–Ω—Ç–∏—Ç–æ–ø-3 –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤).
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤
    products_summary = (
        OrderItem.objects.values("product_id")
        .annotate(
            total_quantity=Sum("quantity"),
        )
        .order_by("-total_quantity")  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥–∞–∂
    )

    top_products = []
    worst_products = []

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ø-3 –∏ –∞–Ω—Ç–∏—Ç–æ–ø-3
    for idx, entry in enumerate(products_summary):
        product = Product.objects.filter(id=entry["product_id"]).first()
        if not product:
            continue
        print(f"URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {product.image}")
        product_data = {
            "name": product.name,
            "sales": entry["total_quantity"],
            # "image": get_image_url(product.image) if product.image else None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_image_url
            "image": product.image if product.image else None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_image_url
        }

        if idx < 3:
            top_products.append(product_data)
        elif idx >= len(products_summary) - 3:
            worst_products.append(product_data)

    return {"top_products": top_products, "worst_products": worst_products}




from catalog.models import Product

def get_products_by_page(page: int, per_page: int = 5):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ."""
    products = Product.objects.all().values("id", "name", "price", "image")  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    total_products = len(products)  # –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ

    start = (page - 1) * per_page
    end = start + per_page
    products_list = list(products)[start:end]

    return {
        "products": products_list,
        "total": total_products,
        "current_page": page,
        "total_pages": (total_products // per_page) + (1 if total_products % per_page else 0)
    }


from users.models import User  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

from users.models import UserProfile  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def is_user_registered(telegram_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID –≤ UserProfile."""
    return UserProfile.objects.filter(telegram_id=telegram_id).exists()

